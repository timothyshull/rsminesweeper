import React, {Component} from 'react'
import {bindActionCreators} from 'redux'
import {connect} from 'react-redux'
import {CELL_PROPS} from '../constants/PropTypeDefs'
import {revealAndCheck} from '../actions'
import './Cell.css'
import {CELL_STATES} from "../constants/index";

class Cell extends Component {
    constructor(props) {
        super(props);
        this.handleClick = this.handleClick.bind(this);
        this.svgConstants = {
            width: "16px",
            height: "16px",
            viewBox: "0 0 52 52",
            none: "none",
            strokeWidth: 1,
            fillRule: "evenodd",
            zero: 0,
            commonDims: 52,
            rx: 8,
            fontFamily: "Roboto-Regular, Roboto",
            fontSize: "36",
            fontWeight: "normal",
            letterSpacing: "-0.0712871328",
            transformDirective: "translate(6.000000, 6.000000)"
        };
        this.colorConstants = {
            black: "#000000",
            darkFill: "#6C6C6C",
            lightFill: "#BDBDBD",
            red: "#C62828",
            fill1: "#00BCD4",
            fill2: "#4CAF50",
            fill3: "#C62828",
            fill4: "#303F9F",
            fill5: "#880E4F",
            fill6: "#00838F",
            fill7: "#000000",
            fill8: "#6C6C6C"
        };
    }

    handleClick(e) {
        e.preventDefault();
        this.props.onClick(this.props);
    }

    getSvgWrapper(innerSvgFunc, width, height, viewBox) {
        return (
            <td onClick={this.props.revealed ? () => {} : this.handleClick}>
                <svg width={width} height={height} viewBox={viewBox}>
                    {innerSvgFunc()}
                </svg>
            </td>
        )
    }

    getUnrevealedCellMarkup(overlayMarkup) {
        const svgCs = this.svgConstants;
        return (
            <g stroke={svgCs.none} strokeWidth={svgCs.strokeWidth} fill={svgCs.none} fillRule={svgCs.fillRule}>
                <rect fill={this.colorConstants.darkFill} x={svgCs.zero} y={svgCs.zero} width={svgCs.commonDims}
                      height={svgCs.commonDims} rx={svgCs.rx}/>
                {overlayMarkup}
            </g>
        )
    }

    getFlaggedCellMarkup() {
        const svgCs = this.svgConstants;
        const overlayMarkup = (
            <g transform={svgCs.transformDirective}>
                <polygon points="0 0 40 0 40 40 0 40"/>
                <polygon fill={this.colorConstants.black} fillRule={svgCs.none}
                         points="24 10 23.3333333 6.66666667 8.33333333 6.66666667 8.33333333 35 11.6666667 35 11.6666667 23.3333333 21 23.3333333 21.6666667 26.6666667 33.3333333 26.6666667 33.3333333 10"/>
            </g>
        );
        return this.getUnrevealedCellMarkup(overlayMarkup);
    }

    getQuestionCellMarkup() {
        const svgCs = this.svgConstants;
        const overlayMarkup = (
            <g transform={svgCs.transformDirective}>
                <polygon points="0 0 40 0 40 40 0 40"/>
                <path
                    d="M18.3333333,30 L21.6666667,30 L21.6666667,26.6666667 L18.3333333,26.6666667 L18.3333333,30 Z M20,3.33333333 C10.8,3.33333333 3.33333333,10.8 3.33333333,20 C3.33333333,29.2 10.8,36.6666667 20,36.6666667 C29.2,36.6666667 36.6666667,29.2 36.6666667,20 C36.6666667,10.8 29.2,3.33333333 20,3.33333333 Z M20,33.3333333 C12.65,33.3333333 6.66666667,27.35 6.66666667,20 C6.66666667,12.65 12.65,6.66666667 20,6.66666667 C27.35,6.66666667 33.3333333,12.65 33.3333333,20 C33.3333333,27.35 27.35,33.3333333 20,33.3333333 Z M20,10 C16.3166667,10 13.3333333,12.9833333 13.3333333,16.6666667 L16.6666667,16.6666667 C16.6666667,14.8333333 18.1666667,13.3333333 20,13.3333333 C21.8333333,13.3333333 23.3333333,14.8333333 23.3333333,16.6666667 C23.3333333,20 18.3333333,19.5833333 18.3333333,25 L21.6666667,25 C21.6666667,21.25 26.6666667,20.8333333 26.6666667,16.6666667 C26.6666667,12.9833333 23.6833333,10 20,10 Z"
                    fill={this.colorConstants.black} fillRule={svgCs.fillRule}/>
            </g>
        );
        return this.getUnrevealedCellMarkup(overlayMarkup);
    }

    getRevealedWrapperMarkup(innerMarkup) {
        const svgCs = this.svgConstants;
        return (
            <g stroke={svgCs.none} strokeWidth={svgCs.strokeWidth} fill={svgCs.none} fillRule={svgCs.fillRule}>
                <g>
                    <rect fill={this.colorConstants.lightFill} x={svgCs.zero} y={svgCs.zero} width={svgCs.commonDims}
                          height={svgCs.commonDims}/>
                    {innerMarkup}
                </g>
            </g>
        );
    }

    getRevealedCellFromState(num, fill) {
        const svgCs = this.svgConstants;
        let innerMarkup = null;
        if (num) {
            if (num !== 9) {
                const fill = this.colorConstants["fill" + num];
                innerMarkup = (
                    <text fontFamily={svgCs.fontFamily} fontSize={svgCs.fontSize} fontWeight={svgCs.fontWeight}
                          letterSpacing={svgCs.letterSpacing} fill={fill}>
                        <tspan x="17" y="38">{num}</tspan>
                    </text>
                );
            } else {
                innerMarkup = this.getBombMarkup();
            }
        }
        return this.getRevealedWrapperMarkup(innerMarkup);
    }

    // bomb markup
    getBombMarkup() {
        return (
            <g>
                <g>
                    <g transform="translate(0.193120, 0.000000)">
                        <path fill={this.colorConstants.red} d="M23.776,18.6c-1.044-0.43-2.11-0.423-3.168,0.022c-1.057,0.444-1.823,1.206-2.28,2.268
				c-0.445,1.066-0.454,2.146-0.027,3.212c0.427,1.065,1.175,1.824,2.222,2.255c0.521,0.215,1.046,0.321,1.572,0.321
				c0.538,0,1.076-0.111,1.611-0.337c1.058-0.444,1.82-1.21,2.264-2.272c0.457-1.062,0.471-2.142,0.043-3.208
				C25.584,19.796,24.832,19.035,23.776,18.6z M25.5,23.861c-0.396,0.948-1.046,1.601-1.988,1.997
				c-0.944,0.396-1.859,0.4-2.799,0.015c-0.927-0.382-1.562-1.026-1.94-1.969c-0.378-0.944-0.371-1.863,0.023-2.807
				c0.406-0.944,1.062-1.596,2.005-1.992c0.48-0.202,0.951-0.303,1.421-0.303c0.454,0,0.905,0.094,1.362,0.282
				c0.938,0.386,1.576,1.033,1.955,1.976C25.918,22.002,25.906,22.918,25.5,23.861z"/>
                        <path fill={this.colorConstants.red} d="M45.281,26.268c-0.428-0.609-1.008-0.987-1.723-1.123l-3.416-0.652
				c0.098-2.605-0.379-5.092-1.424-7.439l2.932-2.166c0.59-0.437,0.95-1.042,1.07-1.797c0.114-0.727-0.045-1.402-0.472-2.007
				l-0.282-0.399c-0.426-0.603-1.007-0.977-1.737-1.114c-0.726-0.103-1.392,0.065-1.981,0.5l-2.764,2.043
				c-1.561-1.724-3.377-3.06-5.435-3.998l0.914-4.471c0.149-0.73,0.017-1.426-0.392-2.066c-0.395-0.617-0.956-1.006-1.67-1.159
				l-0.471-0.101c-0.712-0.152-1.389-0.029-2.018,0.374c-0.604,0.423-0.986,1.007-1.135,1.735l-0.855,4.183
				c-1.433-0.147-2.842-0.124-4.177,0.08c-0.722,0.041-1.415,0.159-2.045,0.348C18.04,7.08,17.879,7.13,17.718,7.179l-1.651-3.735
				c-0.3-0.679-0.808-1.161-1.508-1.431c-0.674-0.26-1.352-0.236-2.017,0.072l-0.439,0.203c-0.663,0.307-1.137,0.815-1.413,1.521
				c-0.244,0.707-0.215,1.408,0.084,2.086l1.731,3.914c-2.471,1.827-4.304,4.089-5.479,6.759l-3.374-0.783
				c-0.712-0.165-1.393-0.042-2.025,0.367c-0.609,0.393-1,0.961-1.161,1.689L0.36,18.32c-0.161,0.725-0.051,1.418,0.332,2.07
				c0.403,0.625,0.968,1.025,1.677,1.19l3.202,0.743c-0.241,2.673,0.113,5.227,1.061,7.636l-2.757,1.91
				c-0.604,0.418-0.981,1.012-1.123,1.762c-0.136,0.723,0.002,1.402,0.411,2.02l0.27,0.407c0.407,0.616,0.976,1.008,1.702,1.167
				c0.167,0.029,0.33,0.043,0.491,0.043c0.536,0,1.039-0.162,1.502-0.482l2.545-1.762c1.685,2.02,3.694,3.557,6.01,4.596
				l-0.82,3.359c-0.177,0.723-0.072,1.422,0.313,2.078c0.371,0.631,0.917,1.042,1.623,1.223l0.467,0.119
				c0.229,0.059,0.455,0.088,0.677,0.088c0.464,0,0.915-0.127,1.35-0.381c0.619-0.399,1.022-0.967,1.198-1.688l0.81-3.316
				c0.609,0.062,1.213,0.098,1.81,0.098c2.214,0,4.336-0.434,6.354-1.291l2.018,3.162c0.398,0.625,0.972,1.021,1.702,1.179
				c0.189,0.04,0.377,0.062,0.562,0.062c0.498,0,0.975-0.15,1.42-0.447l0.403-0.27c0.608-0.406,1.001-0.982,1.169-1.723
				c0.136-0.735,0.003-1.424-0.395-2.047l-1.936-3.035c2.082-1.799,3.61-3.961,4.569-6.467l3.52,0.672
				c0.171,0.033,0.34,0.049,0.507,0.049c0.53,0,1.035-0.166,1.505-0.496c0.596-0.417,0.965-1,1.098-1.734l0.088-0.485
				C45.824,27.594,45.689,26.904,45.281,26.268z M38.547,10.493c0.393-0.291,0.812-0.433,1.27-0.433
				c0.107,0,0.219,0.008,0.332,0.024c0.594,0.111,1.053,0.407,1.404,0.905l0.281,0.399c0.351,0.496,0.475,1.024,0.381,1.618
				c-0.098,0.623-0.381,1.1-0.865,1.457l-2.854,2.109c-0.46-0.955-1.012-1.887-1.664-2.793c-0.32-0.447-0.655-0.872-1.003-1.278
				L38.547,10.493z M24.619,8.202l1.158-5.668c0.123-0.6,0.426-1.062,0.914-1.405c0.37-0.236,0.75-0.353,1.153-0.353
				c0.157,0,0.317,0.018,0.481,0.053l0,0l0.471,0.101c0.585,0.125,1.025,0.431,1.347,0.934c0.337,0.528,0.442,1.076,0.319,1.674
				l-1.158,5.667c-0.122,0.596-0.429,1.044-0.946,1.375c-0.495,0.348-1.021,0.454-1.602,0.331l-0.472-0.101
				c-0.584-0.125-1.032-0.443-1.369-0.97C24.594,9.335,24.497,8.8,24.619,8.202z M11.239,5.679c-0.247-0.559-0.27-1.114-0.073-1.687
				c0.225-0.573,0.6-0.975,1.146-1.228l0.439-0.203c0.544-0.252,1.075-0.271,1.626-0.059c0.577,0.223,0.977,0.601,1.223,1.158
				l1.625,3.676c-1.472,0.498-2.911,1.223-4.296,2.169L11.239,5.679z M2.48,21.071c-0.585-0.136-1.031-0.452-1.358-0.959
				c-0.312-0.53-0.398-1.078-0.266-1.676l0,0l0.106-0.48c0.132-0.596,0.438-1.042,0.935-1.362c0.37-0.239,0.749-0.358,1.146-0.358
				c0.161,0,0.326,0.02,0.495,0.059l5.519,1.28c0.581,0.134,1.013,0.456,1.328,0.991c0.33,0.512,0.427,1.05,0.296,1.644l-0.106,0.48
				c-0.132,0.596-0.45,1.049-0.971,1.385c-0.497,0.32-1.022,0.412-1.605,0.276L2.48,21.071z M6.839,36.354
				c-0.496,0.344-1.026,0.461-1.61,0.359c-0.59-0.131-1.04-0.439-1.376-0.947l-0.27-0.408C3.248,34.852,3.14,34.32,3.251,33.73
				c0.116-0.619,0.413-1.086,0.907-1.428l2.675-1.854c0.502,1.167,1.14,2.301,1.924,3.396c0.188,0.267,0.384,0.523,0.582,0.775
				L6.839,36.354z M19.992,44.291c-0.145,0.594-0.464,1.043-0.965,1.365c-0.524,0.307-1.061,0.383-1.642,0.235l-0.467-0.119
				c-0.578-0.147-1.006-0.47-1.309-0.985c-0.317-0.539-0.4-1.09-0.256-1.683l1.371-5.61c0.144-0.59,0.467-1.025,0.997-1.334
				c0.507-0.327,1.034-0.414,1.61-0.267l0.466,0.119c0.579,0.147,1.014,0.482,1.331,1.022c0.302,0.515,0.379,1.053,0.234,1.645
				L19.992,44.291z M35.912,40.109c0.328,0.513,0.434,1.058,0.324,1.654c-0.137,0.602-0.447,1.057-0.949,1.393l0,0l-0.403,0.269
				c-0.499,0.334-1.021,0.436-1.597,0.312c-0.604-0.13-1.055-0.441-1.381-0.952l-1.975-3.097c1.009-0.466,1.993-1.028,2.945-1.71
				c0.393-0.274,0.768-0.562,1.129-0.857L35.912,40.109z M32.297,37.119c-3.255,2.33-6.865,3.319-10.75,2.955l0.31-1.268
				c0.176-0.723,0.079-1.41-0.292-2.041c-0.384-0.654-0.938-1.079-1.645-1.26l-0.466-0.119c-0.709-0.183-1.384-0.07-1.997,0.324
				c-0.639,0.374-1.052,0.932-1.229,1.656l-0.298,1.22c-2.514-1.164-4.642-2.952-6.349-5.356c-2.317-3.238-3.324-6.824-3.01-10.675
				l1.313,0.305c0.21,0.048,0.416,0.073,0.617,0.073c0.483,0,0.943-0.139,1.373-0.417c0.633-0.408,1.035-0.984,1.197-1.712
				l0.106-0.481c0.162-0.73,0.038-1.419-0.362-2.038c-0.379-0.646-0.934-1.057-1.647-1.223l-1.125-0.261
				c1.139-2.491,2.892-4.6,5.247-6.293c1.653-1.162,3.391-1.99,5.181-2.467c0.57-0.171,1.186-0.275,1.876-0.316
				c0.754-0.115,1.522-0.172,2.3-0.172c0.518,0,1.039,0.028,1.564,0.078l-0.094,0.46c-0.148,0.73-0.025,1.414,0.369,2.03
				c0.409,0.641,0.979,1.042,1.693,1.195l0.471,0.101c0.189,0.041,0.375,0.061,0.557,0.061c0.508,0,0.988-0.156,1.429-0.465
				c0.624-0.399,1.017-0.972,1.167-1.705l0.029-0.148c2.434,1.152,4.502,2.9,6.176,5.234c2.174,3.023,3.217,6.345,3.119,9.901
				l-1.142-0.218c-0.719-0.137-1.383,0.005-1.978,0.422c-0.617,0.434-0.998,1.026-1.132,1.761l-0.089,0.485
				c-0.134,0.736,0.016,1.42,0.439,2.024c0.404,0.631,0.974,1.021,1.693,1.157l1.025,0.195
				C36.828,32.931,34.941,35.275,32.297,37.119z M45.189,28.23l-0.088,0.484c-0.109,0.602-0.399,1.061-0.884,1.4
				c-0.51,0.357-1.042,0.477-1.631,0.364l-5.57-1.062c-0.586-0.112-1.03-0.417-1.365-0.939c-0.352-0.5-0.468-1.034-0.359-1.634
				l0.089-0.485c0.109-0.602,0.41-1.067,0.919-1.426c0.364-0.255,0.748-0.381,1.166-0.381c0.139,0,0.282,0.014,0.43,0.043
				l5.57,1.062c0.59,0.112,1.049,0.412,1.395,0.905C45.192,27.081,45.299,27.626,45.189,28.23z"/>
                        <path fill={this.colorConstants.red} d="M40,23.875c0,0.231-0.005,0.462-0.015,0.691c-2.86-1.066-4.559,0.182-4.86,2.111
	            c-0.188,1.197,0.812,3.197,3.699,3.327C36.366,36.152,30.32,40.5,23.25,40.5c-0.578,0-1.149-0.029-1.712-0.086
	            c1.087-4.227-0.804-4.755-1.663-4.977c-1.695-0.438-3.062,0.938-3.616,3.55C10.499,36.358,6.5,30.58,6.5,23.875
	            c0-0.47,0.02-0.935,0.059-1.395c3.316,0.52,4.379-0.417,4.707-1.675c0.246-0.944-0.14-3.055-3.198-3.961
	            c2.669-5.667,8.464-9.594,15.183-9.594c0.422,0,0.841,0.016,1.256,0.046C24,9.438,25.362,10.783,26.252,11
	            c0.822,0.199,3.998,0.625,3.389-2.496C35.721,10.996,40,16.939,40,23.875z"/>
                    </g>
                </g>
            </g>
        );
    }

    render() {
        const width = this.svgConstants.width;
        const height = this.svgConstants.height;
        const viewBox = this.svgConstants.viewBox;

        let markupFunc = this.getUnrevealedCellMarkup;

        if (this.props.revealed) {
            let state = -1;
            for (let i = 0; i < CELL_STATES.length; ++i) {
                if (this.props.cellState === CELL_STATES[i]) {
                    state = i;
                }
            }
            markupFunc = () => (this.getRevealedCellFromState(state))
        } else {
            if (this.props.flagged) {
                // TODO: check this and fix, add handling for flagging
                markupFunc = this.getSvgWrapper;
            }
        }
        return this.getSvgWrapper(markupFunc.bind(this), width, height, viewBox)
    }
}

Cell.propTypes = CELL_PROPS;

const mapDispatchToProps = dispatch => ({
    onClick: bindActionCreators(revealAndCheck, dispatch)
});

export default connect(null, mapDispatchToProps)(Cell)
